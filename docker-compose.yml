version: '3.8'

services:
  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    restart: always
    ports:
      - "80:80"   # Mantido para renovação do Certbot (HTTP-01) e redirecionamento HTTP->HTTPS
      - "443:443" # Porta HTTPS
    volumes:
      # Mapeia a nova configuração Nginx com SSL
      - ./nginx_ssl.conf:/etc/nginx/nginx.conf:ro
      # Mapeia o diretório de certificados Let's Encrypt para persistência e renovação
      - ./letsencrypt:/etc/letsencrypt
      # Mapeia os arquivos estáticos do frontend
      - ./dist:/usr/share/nginx/html:ro
      # Mapeia arquivos de log do Nginx (opcional, mas útil para debug)
      - ./nginx_logs:/var/log/nginx
    networks:
      - public_network
      - host_network # Rede para acessar a API privada

  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: react_app
    restart: always
    environment:
      - VITE_NODE_ENV=production
      - VITE_API_URL=/api/v1/
      - VITE_API_URL_WS=/ws-notifications
    networks:
      - public_network # Só precisa da rede pública

networks:
  public_network:
    driver: bridge
  host_network:
    driver: bridge

volumes:
  # Define os volumes nomeados para garantir a persistência dos dados do Let's Encrypt
  # Embora o mapeamento direto de diretórios funcione, volumes nomeados são geralmente preferidos
  # Se você preferir mapeamento direto como acima, esta seção pode ser removida.
  # letsencrypt_certs:
  # nginx_logs:
  # Nota: O mapeamento direto (bind mount) usado acima em 'volumes:' para nginx já cria os diretórios se não existirem no host.
  # Se você usar volumes nomeados, precisaria ajustar os mapeamentos acima para usar os nomes (ex: 'letsencrypt_certs:/etc/letsencrypt').
  # Por simplicidade e clareza com o Certbot, mantive os bind mounts diretos.